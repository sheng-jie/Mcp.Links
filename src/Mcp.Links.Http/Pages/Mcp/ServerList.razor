@namespace Mcp.Links.Http.Pages.Mcp

@using System.ComponentModel
@using AntDesign.TableModels
@using AntDesign
@using global::Mcp.Links.Configuration
@using global::Mcp.Links.Http.Services
@using Microsoft.Extensions.Options
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Text.Encodings.Web
@using System.ComponentModel.DataAnnotations

@page "/mcp/servers"

@inherits ServerListBase

<PageHeader Class="site-page-header" Title="MCP Servers" SubTitle="Management of MCP Server Instances">
    <PageHeaderExtra>
        <Space>
            <SpaceItem>
                <Button Type="ButtonType.Default" OnClick="RefreshServerList" Loading="@refreshLoading">
                    <Icon Type="reload" Theme="IconThemeType.Outline" />
                    @(refreshLoading ? "Refreshing..." : "Refresh")
                </Button>
            </SpaceItem>
            <SpaceItem>
                <Button Type="ButtonType.Default" OnClick="ShowMcpJsonModal">
                    <Icon Type="file-text" Theme="IconThemeType.Outline" />
                    View mcp.json
                </Button>
            </SpaceItem>
            <SpaceItem>
                <Button Type="ButtonType.Primary" OnClick="AddNewServer">
                    <Icon Type="plus" Theme="IconThemeType.Outline" />
                    Add New Server
                </Button>
            </SpaceItem>
        </Space>
    </PageHeaderExtra>
</PageHeader>

<div style="margin-bottom: 16px; padding: 16px; background: #fafafa; border-radius: 6px;">
    <Row Gutter="16">
        <Col Span="12">
            <Input Placeholder="Search servers by ID, type, command, or URL..." 
                   @bind-Value="@searchText" 
                   @oninput="OnSearchTextChanged"
                   AllowClear="true"
                   Size="InputSize.Default">
                <Prefix>
                    <Icon Type="search" Theme="IconThemeType.Outline" />
                </Prefix>
            </Input>
        </Col>
        <Col Span="6">
            <Select TItemValue="string" TItem="string"
                    @bind-Value="@searchType" 
                    Placeholder="Filter by type"
                    AllowClear="true"
                    Style="width: 100%;"
                    OnSelectedItemChanged="OnSearchTypeChanged"
                    OnClearSelected="OnSearchTypeClear">
                <SelectOptions>
                    <SelectOption TItemValue="string" TItem="string" Value="@("")" Label="All Types" />
                    <SelectOption TItemValue="string" TItem="string" Value="@("stdio")" Label="stdio" />
                    <SelectOption TItemValue="string" TItem="string" Value="@("sse")" Label="sse" />
                    <SelectOption TItemValue="string" TItem="string" Value="@("http")" Label="http" />
                </SelectOptions>
            </Select>
        </Col>
        <Col Span="6">
            <Select TItemValue="string" TItem="string"
                    @bind-Value="@searchStatus" 
                    Placeholder="Filter by status"
                    AllowClear="true"
                    Style="width: 100%;"
                    OnSelectedItemChanged="OnSearchStatusChanged"
                    OnClearSelected="OnSearchStatusClear">
                <SelectOptions>
                    <SelectOption TItemValue="string" TItem="string" Value="@("")" Label="All Status" />
                    <SelectOption TItemValue="string" TItem="string" Value="@("enabled")" Label="Enabled" />
                    <SelectOption TItemValue="string" TItem="string" Value="@("disabled")" Label="Disabled" />
                </SelectOptions>
            </Select>
        </Col>
    </Row>
    @if (filteredServerData.Length != serverData.Length)
    {
        <div style="margin-top: 12px;">
            <Text Type="TextElementType.Secondary">
                Showing @filteredServerData.Length of @serverData.Length servers
            </Text>
            <Button Type="ButtonType.Link" 
                    Size="ButtonSize.Small" 
                    OnClick="ClearAllFilters"
                    Style="margin-left: 8px;">
                Clear all filters
            </Button>
        </div>
    }
</div>

<Table TItem="McpServerInfo" DataSource="@filteredServerData" OnRowClick="OnRowClick" PageSize="10">
    <AntDesign.Column Title="Server ID" TData="string" DataIndex="@nameof(McpServerInfo.ServerId)">
        <a>@context.ServerId</a>
    </AntDesign.Column>
    <AntDesign.Column Title="Type" TData="string" DataIndex="@nameof(McpServerInfo.Type)">
        @{
            var typeColor = context.Type switch
            {
                "stdio" => TagColor.Blue,
                "sse" => TagColor.Green,
                "http" => TagColor.Orange,
                _ => TagColor.Default
            };
        }
        <Tag Color="@typeColor">@context.Type</Tag>
    </AntDesign.Column>
    <AntDesign.Column Title="Status" TData="bool" DataIndex="@nameof(McpServerInfo.Enabled)">
        @{
            var isToggleLoading = serverToggleLoading.GetValueOrDefault(context.ServerId, false);
        }
        @if (isToggleLoading)
        {
            <Tag Color="TagColor.Processing">
                <Icon Type="loading" Theme="IconThemeType.Outline" />
                Processing...
            </Tag>
        }
        else if (context.Enabled)
        {
            <Tag Color="TagColor.Success">
                <Icon Type="check-circle" Theme="IconThemeType.Outline" />
                Enabled
            </Tag>
        }
        else
        {
            <Tag Color="TagColor.Error">
                <Icon Type="close-circle" Theme="IconThemeType.Outline" />
                Disabled
            </Tag>
        }
    </AntDesign.Column>
    <AntDesign.Column Title="Configuration" TData="string" DataIndex="@nameof(McpServerInfo.Configuration)">
        @if (!string.IsNullOrEmpty(context.Command))
        {
            <div>
                <Text Strong>Command:</Text> <Text Code>@context.Command</Text>
            </div>
        }
        @if (!string.IsNullOrEmpty(context.Url))
        {
            <div>
                <Text Strong>URL:</Text> <Text Code>@context.Url</Text>
            </div>
        }
        @if (context.Args?.Length > 0)
        {
            <div>
                <Text Strong>Args:</Text> <Text Code>@string.Join(" ", context.Args)</Text>
            </div>
        }
    </AntDesign.Column>
    <AntDesign.Column Title="Environment" TData="int" DataIndex="@nameof(McpServerInfo.EnvCount)">
        @if (context.EnvCount > 0)
        {
            <Tag>@context.EnvCount variables</Tag>
        }
        else
        {
            <span class="ant-typography ant-typography-caption">None</span>
        }
    </AntDesign.Column>
    <AntDesign.Column Title="Headers" TData="int" DataIndex="@nameof(McpServerInfo.HeadersCount)">
        @if (context.HeadersCount > 0)
        {
            <Tag>@context.HeadersCount headers</Tag>
        }
        else
        {
            <span class="ant-typography ant-typography-caption">None</span>
        }
    </AntDesign.Column>
    <AntDesign.Column Title="Validation" TData="bool" DataIndex="@nameof(McpServerInfo.IsValid)">
        @if (context.IsValid)
        {
            <Icon Type="check-circle" Theme="IconThemeType.TwoTone" TwoToneColor="#52c41a" />
        }
        else
        {
            <Tooltip Title="@string.Join(", ", context.ValidationErrors)">
                <Icon Type="exclamation-circle" Theme="IconThemeType.TwoTone" TwoToneColor="#eb2f96" />
            </Tooltip>
        }
    </AntDesign.Column>
    <ActionColumn Title="Action">
        @{
            var isToggleLoading = serverToggleLoading.GetValueOrDefault(context.ServerId, false);
            var isDeleteLoading = serverDeleteLoading.GetValueOrDefault(context.ServerId, false);
            var isAnyLoading = isToggleLoading || isDeleteLoading;
        }
        <Space Size="SpaceSize.Middle">
            <SpaceItem>
                <Button Type="ButtonType.Default" 
                        Size="ButtonSize.Small" 
                        OnClick="() => ViewServerDetails(context.ServerId)"
                        Disabled="@isAnyLoading">
                    <Icon Type="eye" Theme="IconThemeType.Outline" />
                    Details
                </Button>
            </SpaceItem>
            <SpaceItem>
                <Button Type="ButtonType.Default" 
                        Size="ButtonSize.Small" 
                        OnClick="() => InspectServer(context.ServerId)"
                        Disabled="@isAnyLoading">
                    <Icon Type="experiment" Theme="IconThemeType.Outline" />
                    Inspector
                </Button>
            </SpaceItem>
            <SpaceItem>
                @if (context.Enabled)
                {
                    <Button Type="ButtonType.Primary" 
                            Size="ButtonSize.Small" 
                            OnClick="() => ToggleServerStatus(context.ServerId)"
                            Loading="@isToggleLoading"
                            Disabled="@isAnyLoading">
                        <Icon Type="pause-circle" Theme="IconThemeType.Outline" />
                        @(isToggleLoading ? "Disabling..." : "Disable")
                    </Button>
                }
                else
                {
                    <Button Type="ButtonType.Primary" 
                            Size="ButtonSize.Small" 
                            OnClick="() => ToggleServerStatus(context.ServerId)"
                            Loading="@isToggleLoading"
                            Disabled="@isAnyLoading">
                        <Icon Type="play-circle" Theme="IconThemeType.Outline" />
                        @(isToggleLoading ? "Enabling..." : "Enable")
                    </Button>
                }
            </SpaceItem>
            <SpaceItem>
                <Button Size="ButtonSize.Small" 
                        OnClick="() => EditServer(context.ServerId)"
                        Disabled="@isAnyLoading">
                    <Icon Type="edit" Theme="IconThemeType.Outline" />
                    Edit
                </Button>
            </SpaceItem>
            <SpaceItem>
                <Popconfirm Title="Are you sure you want to delete this server?" 
                           OnConfirm="() => DeleteServer(context.ServerId)"
                           OkText="Yes" 
                           CancelText="No"
                           Disabled="@isAnyLoading">
                    <Button Danger 
                            Size="ButtonSize.Small"
                            Loading="@isDeleteLoading"
                            Disabled="@isAnyLoading">
                        <Icon Type="delete" Theme="IconThemeType.Outline" />
                        @(isDeleteLoading ? "Deleting..." : "Delete")
                    </Button>
                </Popconfirm>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>

<Modal Title="Add New MCP Server"
       Visible="@addServerModalVisible"
       OnOk="HandleAddServerOk"
       OnCancel="HandleAddServerCancel"
       ConfirmLoading="@addServerLoading"
       Width="800">
    <Form Model="@newServerModel" 
          LabelColSpan="6" 
          WrapperColSpan="18"
          OnFinish="OnAddServerFormFinish"
          OnFinishFailed="OnAddServerFormFinishFailed"
          @ref="addServerForm">
        
        <FormItem Label="Server ID" Required>
            <Input @bind-Value="@context.ServerId" Placeholder="Enter unique server ID" />
            <ValidationMessage For="@(() => newServerModel.ServerId)" />
        </FormItem>

        <FormItem Label="Server Type" Required>
            <Select @bind-Value="@context.Type" 
                    Placeholder="Select server type"
                    OnSelectedItemChanged="EventCallback.Factory.Create<string>(this, OnServerTypeChanged)">
                <SelectOptions>
                    <SelectOption Value="@("stdio")" Label="stdio - Command line executable" />
                    <SelectOption Value="@("sse")" Label="sse - Server-Sent Events" />
                    <SelectOption Value="@("http")" Label="http - HTTP endpoint" />
                </SelectOptions>
            </Select>
            <ValidationMessage For="@(() => newServerModel.Type)" />
        </FormItem>

        @if (newServerModel.Type == "stdio")
        {
            <FormItem Label="Command" Required>
                <Input @bind-Value="@context.Command" Placeholder="Enter command to execute" />
                <ValidationMessage For="@(() => newServerModel.Command)" />
            </FormItem>

            <FormItem Label="Arguments">
                <TextArea @bind-Value="@argumentsText" 
                         Placeholder="Enter arguments (one per line)" 
                         Rows="3" />
            </FormItem>
        }

        @if (newServerModel.Type == "sse" || newServerModel.Type == "http")
        {
            <FormItem Label="URL" Required>
                <Input @bind-Value="@context.Url" Placeholder="Enter server URL (http:// or https://)" />
                <ValidationMessage For="@(() => newServerModel.Url)" />
            </FormItem>

            <FormItem Label="HTTP Headers">
                <div>
                    @if (headers.Any())
                    {
                        @foreach (var (header, index) in headers.Select((h, i) => (h, i)))
                        {
                            <div style="display: flex; gap: 8px; margin-bottom: 8px; align-items: center;">
                                <Input @bind-Value="@header.Key" Placeholder="Header name" Style="flex: 1;" />
                                <span>:</span>
                                <Input @bind-Value="@header.Value" Placeholder="Header value" Style="flex: 1;" />
                                <Button Type="ButtonType.Text" 
                                        Danger 
                                        Icon="delete" 
                                        Size="ButtonSize.Small"
                                        OnClick="() => RemoveHeader(index)" />
                            </div>
                        }
                    }
                    <Button Type="ButtonType.Dashed" 
                            Icon="plus" 
                            OnClick="AddHeader"
                            Style="width: 100%;">
                        Add Header
                    </Button>
                </div>
            </FormItem>
        }

        @if (newServerModel.Type == "stdio")
        {
            <FormItem Label="Environment Variables">
                <div>
                    @if (environmentVariables.Any())
                    {
                        @foreach (var (key, index) in environmentVariables.Select((kv, i) => (kv, i)))
                        {
                            <div style="display: flex; gap: 8px; margin-bottom: 8px; align-items: center;">
                                <Input @bind-Value="@key.Key" Placeholder="Variable name" Style="flex: 1;" />
                                <span>=</span>
                                <Input @bind-Value="@key.Value" Placeholder="Variable value" Style="flex: 1;" />
                                <Button Type="ButtonType.Text" 
                                        Danger 
                                        Icon="delete" 
                                        Size="ButtonSize.Small"
                                        OnClick="() => RemoveEnvironmentVariable(index)" />
                            </div>
                        }
                    }
                    <Button Type="ButtonType.Dashed" 
                            Icon="plus" 
                            OnClick="AddEnvironmentVariable"
                            Style="width: 100%;">
                        Add Environment Variable
                    </Button>
                </div>
            </FormItem>
        }

        <FormItem Label="Enabled">
            <Switch @bind-Value="@context.Enabled" CheckedChildren="Yes" UnCheckedChildren="No" />
        </FormItem>

    </Form>
</Modal>

<Modal Title="Edit MCP Server"
       Visible="@editServerModalVisible"
       OnOk="HandleEditServerOk"
       OnCancel="HandleEditServerCancel"
       ConfirmLoading="@editServerLoading"
       Width="800">
    <Form Model="@editServerModel" 
          LabelColSpan="6" 
          WrapperColSpan="18"
          OnFinish="OnEditServerFormFinish"
          OnFinishFailed="OnEditServerFormFinishFailed"
          @ref="editServerForm">
        
        <FormItem Label="Server ID">
            <Input @bind-Value="@context.ServerId" Placeholder="Server ID" Disabled="true" />
            <Text Type="TextElementType.Secondary">Server ID cannot be changed</Text>
        </FormItem>

        <FormItem Label="Server Type" Required>
            <Select @bind-Value="@context.Type" 
                    Placeholder="Select server type"
                    OnSelectedItemChanged="EventCallback.Factory.Create<string>(this, OnEditServerTypeChanged)">
                <SelectOptions>
                    <SelectOption Value="@("stdio")" Label="stdio - Command line executable" />
                    <SelectOption Value="@("sse")" Label="sse - Server-Sent Events" />
                    <SelectOption Value="@("http")" Label="http - HTTP endpoint" />
                </SelectOptions>
            </Select>
            <ValidationMessage For="@(() => editServerModel.Type)" />
        </FormItem>

        @if (editServerModel.Type == "stdio")
        {
            <FormItem Label="Command" Required>
                <Input @bind-Value="@context.Command" Placeholder="Enter command to execute" />
                <ValidationMessage For="@(() => editServerModel.Command)" />
            </FormItem>

            <FormItem Label="Arguments">
                <TextArea @bind-Value="@editArgumentsText" 
                         Placeholder="Enter arguments (one per line)" 
                         Rows="3" />
            </FormItem>
        }

        @if (editServerModel.Type == "sse" || editServerModel.Type == "http")
        {
            <FormItem Label="URL" Required>
                <Input @bind-Value="@context.Url" Placeholder="Enter server URL (http:// or https://)" />
                <ValidationMessage For="@(() => editServerModel.Url)" />
            </FormItem>

            <FormItem Label="HTTP Headers">
                <div>
                    @if (editHeaders.Any())
                    {
                        @foreach (var (header, index) in editHeaders.Select((h, i) => (h, i)))
                        {
                            <div style="display: flex; gap: 8px; margin-bottom: 8px; align-items: center;">
                                <Input @bind-Value="@header.Key" Placeholder="Header name" Style="flex: 1;" />
                                <span>:</span>
                                <Input @bind-Value="@header.Value" Placeholder="Header value" Style="flex: 1;" />
                                <Button Type="ButtonType.Text" 
                                        Danger 
                                        Icon="delete" 
                                        Size="ButtonSize.Small"
                                        OnClick="() => RemoveEditHeader(index)" />
                            </div>
                        }
                    }
                    <Button Type="ButtonType.Dashed" 
                            Icon="plus" 
                            OnClick="AddEditHeader"
                            Style="width: 100%;">
                        Add Header
                    </Button>
                </div>
            </FormItem>
        }

        @if (editServerModel.Type == "stdio")
        {
            <FormItem Label="Environment Variables">
                <div>
                    @if (editEnvironmentVariables.Any())
                    {
                        @foreach (var (key, index) in editEnvironmentVariables.Select((kv, i) => (kv, i)))
                        {
                            <div style="display: flex; gap: 8px; margin-bottom: 8px; align-items: center;">
                                <Input @bind-Value="@key.Key" Placeholder="Variable name" Style="flex: 1;" />
                                <span>=</span>
                                <Input @bind-Value="@key.Value" Placeholder="Variable value" Style="flex: 1;" />
                                <Button Type="ButtonType.Text" 
                                        Danger 
                                        Icon="delete" 
                                        Size="ButtonSize.Small"
                                        OnClick="() => RemoveEditEnvironmentVariable(index)" />
                            </div>
                        }
                    }
                    <Button Type="ButtonType.Dashed" 
                            Icon="plus" 
                            OnClick="AddEditEnvironmentVariable"
                            Style="width: 100%;">
                        Add Environment Variable
                    </Button>
                </div>
            </FormItem>
        }

        <FormItem Label="Enabled">
            <Switch @bind-Value="@context.Enabled" CheckedChildren="Yes" UnCheckedChildren="No" />
        </FormItem>

    </Form>
</Modal>

<Modal Title="MCP Configuration (mcp.json)"
       Visible="@mcpJsonModalVisible"
       OnCancel="HandleMcpJsonCancel"
       Footer="null"
       Width="1000">
    <div style="margin-bottom: 16px;">
        <Space>
            <SpaceItem>
                <Button Type="ButtonType.Primary" OnClick="CopyMcpJsonToClipboard" Loading="@copyLoading">
                    <Icon Type="copy" Theme="IconThemeType.Outline" />
                    @(copyLoading ? "Copying..." : "Copy to Clipboard")
                </Button>
            </SpaceItem>
            <SpaceItem>
                <Button Type="ButtonType.Default" OnClick="RefreshMcpJson" Loading="@refreshJsonLoading">
                    <Icon Type="reload" Theme="IconThemeType.Outline" />
                    @(refreshJsonLoading ? "Refreshing..." : "Refresh")
                </Button>
            </SpaceItem>
        </Space>
    </div>
    
    @if (loadingMcpJson)
    {
        <div style="text-align: center; padding: 40px;">
            <Spin Size="SpinSize.Large" />
            <div style="margin-top: 16px;">Loading mcp.json content...</div>
        </div>
    }
    else if (!string.IsNullOrEmpty(mcpJsonContent))
    {
        <div style="background: #f6f6f6; border: 1px solid #d9d9d9; border-radius: 6px; padding: 12px;">
            <pre style="margin: 0; white-space: pre-wrap; word-wrap: break-word; font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px; line-height: 1.4;">@mcpJsonContent</pre>
        </div>
    }
    else
    {
        <div style="text-align: center; padding: 40px; color: #999;">
            <Icon Type="file-exclamation" Theme="IconThemeType.Outline" Style="font-size: 48px; margin-bottom: 16px;" />
            <div>No content available</div>
        </div>
    }
</Modal>

